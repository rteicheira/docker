# Website: https://crazymax.dev/diun/
# Container: https://hub.docker.com/r/crazymax/diun
# GitHub: https://github.com/crazy-max/diun

services:
  diun:
    image: crazymax/diun:latest
    container_name: diun
    restart: unless-stopped
    command: serve
    volumes:
      - ./<localpath>/diun/:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: ${TZ}
      DIUN_WATCH_WORKERS: ${DIUN_WATCH_WORKERS}
      DIUN_WATCH_SCHEDULE: ${DIUN_WATCH_SCHEDULE}
      DIUN_WATCH_JITTER: ${DIUN_WATCH_JITTER}
      DIUN_PROVIDERS_DOCKER: ${DIUN_PROVIDERS_DOCKER}
      DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT: ${DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT}
      DIUN_DB_PATH: ${DIUN_DB_PATH}
      DIUN_NOTIF_DISCORD_WEBHOOKURL: ${DIUN_NOTIF_DISCORD_WEBHOOKURL}
      DIUN_NOTIF_DISCORD_RENDERFIELDS: ${DIUN_NOTIF_DISCORD_RENDERFIELDS}
      DIUN_NOTIF_DISCORD_TIMEOUT: ${DIUN_NOTIF_DISCORD_TIMEOUT}
      DIUN_NOTIF_DISCORD_TEMPLATEBODY: |
        ***__Host: <hostname>__***
        
        Docker container {{ if .Entry.Image.HubLink }}[**{{ .Entry.Image }}**]({{ .Entry.Image.HubLink }}){{ else }}**{{ .Entry.Image }}**{{ end }} which you subscribed to through {{ .Entry.Provider }} provider {{ if (eq .Entry.Status "new") }}is available{{ else }}has been updated{{ end }} on {{ .Entry.Image.Domain }} registry (triggered by {{ .Meta.Hostname }} host).
    labels:
      - diun.enable=true

networks:
  default:
    external: true
    name: diun